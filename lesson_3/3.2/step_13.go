/*
Представьте что вы работаете в большой компании где используется модульная архитектура.
Ваш коллега написал модуль с какой-то логикой (вы не знаете) и
передает в вашу программу какие-то данные. Вы же пишете функцию которая считывает
две переменных типа string ,  а возвращает число типа int64 которое нужно получить
сложением этих строк.

Но не было бы так все просто, ведь ваш коллега не пишет на Go, и он зол из-за того,
что гоферам платят больше. Поэтому он решил подшутить над вами и подсунул вам свинью.
Он придумал вставлять мусор в строки перед тем как вызывать вашу функцию.

Поэтому предварительно вам нужно убрать из них мусор и конвертировать в числа.
Под мусором имеются ввиду лишние символы и спец знаки.
Разрешается использовать только определенные пакеты: fmt, strconv, unicode, strings,  bytes.
Они уже импортированы, вам ничего импортировать не нужно!
*/

func adding(str1, str2 string) int64 {
	// Функция для фильтрации мусора и сохранения только цифр
	cleanString := func(str string) string {
		result := make([]rune, 0, len(str))
		for _, ch := range str {
			if unicode.IsDigit(ch) { // Проверяем, является ли символ цифрой
				result = append(result, ch)
			}
		}
		return string(result)
	}

	// Очищаем строки от лишних символов
	numStr1 := cleanString(str1)
	numStr2 := cleanString(str2)

	// Конвертируем очищенные строки в целые числа
	num1, _ := strconv.ParseInt(numStr1, 10, 64)
	num2, _ := strconv.ParseInt(numStr2, 10, 64)

	// Возвращаем сумму чисел
	return num1 + num2
}